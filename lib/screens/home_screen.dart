import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'admin_panel_screen.dart';
import 'package:decanat_progect/admin/developer_tools_screen.dart';
import 'package:decanat_progect/constants.dart';
import 'package:decanat_progect/widgets/victory_banner.dart';
import 'package:decanat_progect/widgets/bubble_button.dart';
import 'department_detail_screen.dart';
import 'webview_screen.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:decanat_progect/admin/admin_schedule_editor.dart';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
import 'package:decanat_progect/user/user_home_content.dart';
import 'package:decanat_progect/user/student_home_content.dart';
import 'package:decanat_progect/teacher/teacher_home_content.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> with SingleTickerProviderStateMixin {
  String _userRole = 'user';
  String? _userId;
  final String _serverUrl = "https://0.0.0.0:8000";

  // –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∫–ª–∞–¥–∫–∞–º–∏
  late TabController _tabController;
  int _currentTabIndex = 0;

  @override
  void initState() {
    super.initState();
    _loadUserRole();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TabController —Å 3 –≤–∫–ª–∞–¥–∫–∞–º–∏
    _tabController = TabController(length: 3, vsync: this);
    _tabController.addListener(_handleTabSelection);
  }

  void _handleTabSelection() {
    if (_tabController.indexIsChanging) {
      setState(() {
        _currentTabIndex = _tabController.index;
      });
    }
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  Future<void> _loadUserRole() async {
    final prefs = await SharedPreferences.getInstance();
    _userId = prefs.getString('userId');

    if (_userId != null) {
      try {
        final response = await http.get(
            Uri.parse('$_serverUrl/api/users/$_userId/role')
        );

        if (response.statusCode == 200) {
          final data = json.decode(response.body);
          setState(() {
            _userRole = data['role'] ?? 'user';
          });
          await prefs.setString('userRole', _userRole);
        }
      } catch (e) {
        print('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $e');
        _userRole = prefs.getString('userRole') ?? 'user';
        setState(() {});
      }
    } else {
      _userRole = prefs.getString('userRole') ?? 'user';
      setState(() {});
    }
  }

  bool get _isAdminOrDeveloper {
    return _userRole == 'admin' || _userRole == 'developer';
  }

  IconData _getRoleIcon() {
    switch (_userRole) {
      case 'admin': return Icons.admin_panel_settings;
      case 'developer': return Icons.developer_mode;
      default: return Icons.person;
    }
  }

  Color _getRoleColor() {
    switch (_userRole) {
      case 'admin': return Colors.blue;
      case 'developer': return Colors.purple;
      default: return Colors.green;
    }
  }

  String _getRoleName() {
    switch (_userRole) {
      case 'admin': return '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä';
      case 'developer': return '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫';
      default: return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    }
  }

  PreferredSizeWidget _buildAppBar() {
    return AppBar(
      title: Row(
        children: [
          Text(
            '–§–∞–∫—É–ª—å—Ç–µ—Ç –ò–°–ü',
            style: TextStyle(
              color: Theme.of(context).colorScheme.onPrimary,
              fontWeight: FontWeight.bold,
              fontSize: 22,
            ),
          ),
          const SizedBox(width: 8),
          if (_isAdminOrDeveloper) _buildServerStatusIndicator(),
        ],
      ),
      backgroundColor: AppColors.primary,
      centerTitle: true,
      elevation: 0,
      iconTheme: IconThemeData(color: Theme.of(context).colorScheme.onPrimary),
      actions: [
        if (_isAdminOrDeveloper)
          IconButton(
            icon: Icon(
              _userRole == 'developer' ? Icons.developer_mode : Icons.admin_panel_settings,
              color: Theme.of(context).colorScheme.onPrimary,
            ),
            onPressed: _showDeveloperTools,
            tooltip: '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞',
          ),
      ],
    );
  }

  Widget _buildServerStatusIndicator() {
    return FutureBuilder(
      future: _checkServerStatus(),
      builder: (context, snapshot) {
        final isOnline = snapshot.data ?? false;
        return Container(
          padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
          decoration: BoxDecoration(
            color: isOnline ? Colors.green.withOpacity(0.1) : Colors.red.withOpacity(0.1),
            borderRadius: BorderRadius.circular(20),
            border: Border.all(
              color: isOnline ? Colors.green : Colors.red,
              width: 1,
            ),
          ),
          child: Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              Icon(
                isOnline ? Icons.wifi : Icons.wifi_off,
                size: 14,
                color: isOnline ? Colors.green : Colors.red,
              ),
              const SizedBox(width: 4),
              Text(
                isOnline ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω',
                style: TextStyle(
                  fontSize: 12,
                  color: isOnline ? Colors.green : Colors.red,
                  fontWeight: FontWeight.w500,
                ),
              ),
            ],
          ),
        );
      },
    );
  }

  Future<bool> _checkServerStatus() async {
    try {
      final response = await http
          .get(Uri.parse('$_serverUrl/api/health'))
          .timeout(const Duration(seconds: 5));
      return response.statusCode == 200;
    } catch (e) {
      return false;
    }
  }

  Widget _buildDivider(BuildContext context) {
    return Row(
      children: [
        Expanded(
          child: Container(
            height: 1,
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [
                  Colors.transparent,
                  Theme.of(context).colorScheme.primary.withOpacity(0.3),
                  Colors.transparent,
                ],
              ),
            ),
          ),
        ),
        Container(
          margin: const EdgeInsets.symmetric(horizontal: 12),
          width: 8,
          height: 8,
          decoration: BoxDecoration(
            color: Theme.of(context).colorScheme.primary,
            shape: BoxShape.circle,
          ),
        ),
        Expanded(
          child: Container(
            height: 1,
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [
                  Colors.transparent,
                  Theme.of(context).colorScheme.primary.withOpacity(0.3),
                  Colors.transparent,
                ],
              ),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildInfoCard(BuildContext context) {
    return FutureBuilder(
      future: _loadTodaySchedule(),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const Center(child: CircularProgressIndicator());
        }

        if (!snapshot.hasData || snapshot.data == null) {
          return Card(
            elevation: 2,
            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(14)),
            color: Theme.of(context).cardColor,
            child: Container(
              padding: const EdgeInsets.all(20),
              child: Column(
                children: [
                  Icon(Icons.info_outline,
                      size: 32, color: Theme.of(context).colorScheme.primary),
                  const SizedBox(height: 12),
                  const Text(
                    '–°–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç',
                    style: TextStyle(fontSize: 14, fontWeight: FontWeight.w600),
                  ),
                ],
              ),
            ),
          );
        }

        final Map<String, dynamic> todayData = snapshot.data as Map<String, dynamic>;
        final String dayName = todayData['dayName'];
        final List lessons = todayData['lessons'];

        return Card(
          elevation: 2,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(14)),
          color: Theme.of(context).cardColor,
          child: Container(
            padding: const EdgeInsets.all(20),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Icon(Icons.today,
                        size: 28, color: Theme.of(context).colorScheme.primary),
                    const SizedBox(width: 12),
                    Text(
                      '$dayName (${todayData['weekName']})',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                        color: Theme.of(context).colorScheme.onBackground,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 16),
                if (lessons.isEmpty)
                  Text(
                    '–°–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç üéâ',
                    style: TextStyle(
                        color: Theme.of(context).colorScheme.onSurface, fontSize: 14),
                  )
                else
                  Column(
                    children: lessons.map((lesson) {
                      return ListTile(
                        contentPadding: EdgeInsets.zero,
                        leading: CircleAvatar(
                          backgroundColor: Colors.blue,
                          child: Text(
                            '${lesson['lesson_number']}',
                            style: const TextStyle(color: Colors.white),
                          ),
                        ),
                        title: Text(
                          lesson['subject'],
                          style: const TextStyle(fontWeight: FontWeight.w600),
                        ),
                        subtitle:
                        Text('${lesson['teacher']} ‚Ä¢ ${lesson['classroom']}'),
                        trailing: Text(lesson['type']),
                      );
                    }).toList(),
                  ),
              ],
            ),
          ),
        );
      },
    );
  }

  /// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–∑ SharedPreferences
  Future<Map<String, dynamic>?> _loadTodaySchedule() async {
    final prefs = await SharedPreferences.getInstance();
    final group = prefs.getString('selectedGroup');
    final week = prefs.getString('selectedWeek') ?? 'upper';
    if (group == null) return null;

    final cached = prefs.getString('schedule_${group}_$week');
    if (cached == null) return null;

    final scheduleData = json.decode(cached);
    final todayIndex = DateTime.now().weekday; // 1=–ü–Ω ... 7=–í—Å
    const days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'];

    if (todayIndex > 6) return null; // –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ

    final todayName = days[todayIndex - 1];
    final lessons = (scheduleData[todayName] ?? []) as List;

    return {
      'dayName': todayName,
      'weekName': week == 'upper' ? '–í–µ—Ä—Ö–Ω—è—è –Ω–µ–¥–µ–ª—è' : '–ù–∏–∂–Ω—è—è –Ω–µ–¥–µ–ª—è',
      'lessons': lessons,
    };
  }

  Widget _buildSectionTitle(BuildContext context, String title) {
    return Padding(
      padding: const EdgeInsets.only(left: 4.0),
      child: Text(
        title,
        style: TextStyle(
          fontSize: 18,
          fontWeight: FontWeight.bold,
          color: Theme.of(context).colorScheme.onBackground,
          letterSpacing: -0.5,
        ),
      ),
    );
  }

  Widget _buildNewsItem(BuildContext context, String title, String date, IconData icon, Color color) {
    return Card(
      elevation: 1,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
      color: Theme.of(context).cardColor,
      child: ListTile(
        leading: Container(
          width: 42,
          height: 42,
          decoration: BoxDecoration(color: color.withOpacity(0.08), shape: BoxShape.circle),
          child: Icon(icon, color: color, size: 20),
        ),
        title: Text(
          title,
          style: TextStyle(
            fontWeight: FontWeight.w600,
            fontSize: 14,
            color: Theme.of(context).colorScheme.onBackground,
          ),
        ),
        subtitle: Text(
          date,
          style: TextStyle(color: Theme.of(context).colorScheme.onSurface, fontSize: 12),
        ),
        trailing: Icon(Icons.arrow_forward_ios, size: 16, color: Theme.of(context).colorScheme.onSurface),
        onTap: () => _showNewsDetails(title, date),
        contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      ),
    );
  }

  void _showNewsDetails(String title, String date) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text(title),
          content: Text(
            '–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏–∏ "$title", –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –Ω–∞ $date. '
                '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞.',
          ),
          actions: [
            TextButton(onPressed: () => Navigator.pop(context), child: const Text('–ó–∞–∫—Ä—ã—Ç—å')),
            TextButton(
              onPressed: () {
                Navigator.pop(context);
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => WebViewScreen(
                      url: 'https://donntu.ru/news',
                      title: '–ù–æ–≤–æ—Å—Ç–∏ –î–æ–Ω–ù–¢–£',
                    ),
                  ),
                );
              },
              child: const Text('–ü–æ–¥—Ä–æ–±–Ω–µ–µ'),
            ),
          ],
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
        );
      },
    );
  }

  Future<void> _updateUserRole(String userId, String newRole) async {
    if (_userRole != 'developer') {
      _showSnackBar('–¢–æ–ª—å–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å —Ä–æ–ª–∏');
      return;
    }

    try {
      final response = await http.put(
        Uri.parse('$_serverUrl/api/users/role'),
        headers: {'Content-Type': 'application/json'},
        body: json.encode({'user_id': userId, 'role': newRole}),
      );

      if (response.statusCode == 200) {
        _showSnackBar('–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
      } else {
        _showSnackBar('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏');
      }
    } catch (e) {
      _showSnackBar('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e');
    }
  }

  void _showSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text(message), duration: const Duration(seconds: 2)),
    );
  }

  void _showDeveloperTools() {
    showModalBottomSheet(
      context: context,
      builder: (BuildContext context) {
        return Container(
          padding: const EdgeInsets.all(16),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Text(
                '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: Theme.of(context).colorScheme.onBackground,
                ),
              ),
              const SizedBox(height: 16),
              if (_userRole == 'developer') ...[
                _buildDeveloperButton(
                  '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º',
                  Icons.schedule,
                      () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(builder: (context) => AdminScheduleEditor()),
                    );
                  },
                ),
                const SizedBox(height: 8),
                _buildDeveloperButton(
                  '–ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
                  Icons.admin_panel_settings,
                      () => _showRoleChangeDialog('admin'),
                ),
                const SizedBox(height: 8),
                _buildDeveloperButton(
                  '–°–Ω—è—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
                  Icons.person_remove,
                      () => _showRemoveAdminDialog(),
                ),
                const SizedBox(height: 8),
              ],
              _buildDeveloperButton(
                '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º',
                Icons.wifi,
                _checkServerConnection,
              ),
              const SizedBox(height: 8),
              _buildDeveloperButton(
                '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ',
                Icons.info,
                _showUserInfo,
              ),
            ],
          ),
        );
      },
    );
  }

  Widget _buildDeveloperButton(String text, IconData icon, VoidCallback onPressed) {
    return ElevatedButton.icon(
      icon: Icon(icon, size: 20),
      label: Text(text),
      onPressed: onPressed,
      style: ElevatedButton.styleFrom(
        backgroundColor: AppColors.primary,
        foregroundColor: Colors.white,
        minimumSize: const Size(double.infinity, 50),
      ),
    );
  }

  Future<void> _checkServerConnection() async {
    try {
      final response = await http.get(Uri.parse('$_serverUrl/api/health'));
      if (response.statusCode == 200) {
        _showSnackBar('–°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω ‚úì');
      } else {
        _showSnackBar('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚úó');
      }
    } catch (e) {
      _showSnackBar('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $e');
    }
  }

  void _showUserInfo() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text('ID: $_userId'),
              Text('–†–æ–ª—å: $_userRole'),
              Text('–°–µ—Ä–≤–µ—Ä: $_serverUrl'),
            ],
          ),
          actions: [TextButton(onPressed: () => Navigator.pop(context), child: const Text('OK'))],
        );
      },
    );
  }

  void _showRoleChangeDialog(String role) {
    final roleName = role == 'admin' ? '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' : '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
    String userId = '';

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('–ù–∞–∑–Ω–∞—á–∏—Ç—å $roleName'),
          content: TextField(
            decoration: const InputDecoration(
              labelText: 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
              hintText: '–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
              border: OutlineInputBorder(),
            ),
            onChanged: (value) => userId = value,
            keyboardType: TextInputType.number,
          ),
          actions: [
            TextButton(onPressed: () => Navigator.pop(context), child: const Text('–û—Ç–º–µ–Ω–∞')),
            TextButton(
              onPressed: () {
                if (userId.isNotEmpty) {
                  _updateUserRole(userId, role);
                  Navigator.pop(context);
                } else {
                  _showSnackBar('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                }
              },
              child: Text('–ù–∞–∑–Ω–∞—á–∏—Ç—å $roleName'),
            ),
          ],
        );
      },
    );
  }

  void _showRemoveAdminDialog() {
    String userId = '';

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('–°–Ω—è—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'),
          content: TextField(
            decoration: const InputDecoration(
              labelText: 'ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
              hintText: '–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
              border: OutlineInputBorder(),
            ),
            onChanged: (value) => userId = value,
            keyboardType: TextInputType.number,
          ),
          actions: [
            TextButton(onPressed: () => Navigator.pop(context), child: const Text('–û—Ç–º–µ–Ω–∞')),
            TextButton(
              onPressed: () {
                if (userId.isNotEmpty) {
                  _updateUserRole(userId, 'user');
                  Navigator.pop(context);
                } else {
                  _showSnackBar('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                }
              },
              child: const Text('–°–Ω—è—Ç—å –ø—Ä–∞–≤–∞'),
            ),
          ],
        );
      },
    );
  }

  // –í–∏–¥–∂–µ—Ç –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —Å –±–∞–Ω–Ω–µ—Ä–æ–º –∏ TabBar
  Widget _buildHeaderWithTabs() {
    return Column(
      children: [
        const VictoryBanner(),
        Container(
          color: AppColors.primary,
          child: TabBar(
            controller: _tabController,
            indicatorColor: Colors.white,
            labelColor: Colors.white,
            unselectedLabelColor: Colors.white.withOpacity(0.7),
            tabs: const [
              Tab(text: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'),
              Tab(text: '–°—Ç—É–¥–µ–Ω—Ç'),
              Tab(text: '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å'),
            ],
          ),
        ),
      ],
    );
  }

  // –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∫–ª–∞–¥–∫–∏
  Widget _buildTabContent(int tabIndex) {
    switch (tabIndex) {
      case 0: // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        return Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            UserHomeContent(),
            const SizedBox(height: 24),
            _buildDivider(context),
            const SizedBox(height: 24),
            _buildInfoCard(context),
            const SizedBox(height: 28),
            _buildSectionTitle(context, '–ù–æ–≤–æ—Å—Ç–∏ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞'),
            const SizedBox(height: 16),
            _buildNewsItem(context, '–î–µ–Ω—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π', '25 —è–Ω–≤–∞—Ä—è 2025', Icons.calendar_today, AppColors.primary),
            const SizedBox(height: 12),
            _buildNewsItem(context, '–ù–∞—É—á–Ω–∞—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è', '15 —Ñ–µ–≤—Ä–∞–ª—è 2025', Icons.science, Colors.blue[700]!),
            const SizedBox(height: 12),
            _buildNewsItem(context, '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è', '8 –º–∞—Ä—Ç–∞ 2025', Icons.sports, Colors.green[700]!),
          ],
        );
      case 1: // –°—Ç—É–¥–µ–Ω—Ç
        return Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            StudentHomeContent(),
            const SizedBox(height: 24),
            _buildDivider(context),
            const SizedBox(height: 24),
            _buildInfoCard(context),
            const SizedBox(height: 28),
            _buildSectionTitle(context, '–ù–æ–≤–æ—Å—Ç–∏ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞'),
            const SizedBox(height: 16),
            _buildNewsItem(context, '–î–µ–Ω—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π', '25 —è–Ω–≤–∞—Ä—è 2025', Icons.calendar_today, AppColors.primary),
            const SizedBox(height: 12),
            _buildNewsItem(context, '–ù–∞—É—á–Ω–∞—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è', '15 —Ñ–µ–≤—Ä–∞–ª—è 2025', Icons.science, Colors.blue[700]!),
            const SizedBox(height: 12),
            _buildNewsItem(context, '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è', '8 –º–∞—Ä—Ç–∞ 2025', Icons.sports, Colors.green[700]!),
          ],
        );
      case 2: // –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
        return Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            TeacherHomeContent(),
            const SizedBox(height: 24),
            _buildDivider(context),
            const SizedBox(height: 24),
            _buildInfoCard(context),
            const SizedBox(height: 28),
            _buildSectionTitle(context, '–ù–æ–≤–æ—Å—Ç–∏ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞'),
            const SizedBox(height: 16),
            _buildNewsItem(context, '–î–µ–Ω—å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π', '25 —è–Ω–≤–∞—Ä—è 2025', Icons.calendar_today, AppColors.primary),
            const SizedBox(height: 12),
            _buildNewsItem(context, '–ù–∞—É—á–Ω–∞—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è', '15 —Ñ–µ–≤—Ä–∞–ª—è 2025', Icons.science, Colors.blue[700]!),
            const SizedBox(height: 12),
            _buildNewsItem(context, '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è', '8 –º–∞—Ä—Ç–∞ 2025', Icons.sports, Colors.green[700]!),
          ],
        );
      default:
        return Container();
    }
  }

  @override
  Widget build(BuildContext context) {
    return DefaultTabController(
      length: 3,
      child: Scaffold(
        backgroundColor: Theme.of(context).colorScheme.background,
        appBar: _buildAppBar(),
        body: NestedScrollView(
          headerSliverBuilder: (BuildContext context, bool innerBoxIsScrolled) {
            return [
              SliverToBoxAdapter(
                child: _buildHeaderWithTabs(),
              ),
            ];
          },
          body: TabBarView(
            controller: _tabController,
            children: [
              // –í–∫–ª–∞–¥–∫–∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
              SingleChildScrollView(
                padding: const EdgeInsets.all(20.0),
                child: _buildTabContent(0),
              ),

              // –í–∫–ª–∞–¥–∫–∞ –°—Ç—É–¥–µ–Ω—Ç
              SingleChildScrollView(
                padding: const EdgeInsets.all(20.0),
                child: _buildTabContent(1),
              ),

              // –í–∫–ª–∞–¥–∫–∞ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
              SingleChildScrollView(
                padding: const EdgeInsets.all(20.0),
                child: _buildTabContent(2),
              ),
            ],
          ),
        ),
        floatingActionButton: _isAdminOrDeveloper
            ? FloatingActionButton(
          onPressed: () {
            if (_userRole == 'developer') {
              Navigator.push(context, MaterialPageRoute(builder: (context) => DeveloperToolsScreen()));
            } else {
              Navigator.push(context, MaterialPageRoute(builder: (context) => AdminPanelScreen()));
            }
          },
          backgroundColor: Colors.transparent,
          elevation: 0,
          child: Container(
            width: 60,
            height: 60,
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: _userRole == 'developer'
                    ? [Colors.purple, Colors.blue]
                    : [Colors.blue, Colors.green],
              ),
              borderRadius: BorderRadius.circular(30),
            ),
            child: Icon(
              _userRole == 'developer' ? Icons.developer_mode : Icons.admin_panel_settings_outlined,
              color: Colors.white,
              size: 30,
            ),
          ),
        )
            : null,
      ),
    );
  }
}